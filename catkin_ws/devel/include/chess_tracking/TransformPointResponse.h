// Generated by gencpp from file chess_tracking/TransformPointResponse.msg
// DO NOT EDIT!


#ifndef CHESS_TRACKING_MESSAGE_TRANSFORMPOINTRESPONSE_H
#define CHESS_TRACKING_MESSAGE_TRANSFORMPOINTRESPONSE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Point.h>

namespace chess_tracking
{
template <class ContainerAllocator>
struct TransformPointResponse_
{
  typedef TransformPointResponse_<ContainerAllocator> Type;

  TransformPointResponse_()
    : transformed_point()  {
    }
  TransformPointResponse_(const ContainerAllocator& _alloc)
    : transformed_point(_alloc)  {
  (void)_alloc;
    }



   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _transformed_point_type;
  _transformed_point_type transformed_point;





  typedef boost::shared_ptr< ::chess_tracking::TransformPointResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::chess_tracking::TransformPointResponse_<ContainerAllocator> const> ConstPtr;

}; // struct TransformPointResponse_

typedef ::chess_tracking::TransformPointResponse_<std::allocator<void> > TransformPointResponse;

typedef boost::shared_ptr< ::chess_tracking::TransformPointResponse > TransformPointResponsePtr;
typedef boost::shared_ptr< ::chess_tracking::TransformPointResponse const> TransformPointResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::chess_tracking::TransformPointResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::chess_tracking::TransformPointResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::chess_tracking::TransformPointResponse_<ContainerAllocator1> & lhs, const ::chess_tracking::TransformPointResponse_<ContainerAllocator2> & rhs)
{
  return lhs.transformed_point == rhs.transformed_point;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::chess_tracking::TransformPointResponse_<ContainerAllocator1> & lhs, const ::chess_tracking::TransformPointResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace chess_tracking

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::chess_tracking::TransformPointResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::chess_tracking::TransformPointResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::chess_tracking::TransformPointResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::chess_tracking::TransformPointResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::chess_tracking::TransformPointResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::chess_tracking::TransformPointResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::chess_tracking::TransformPointResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "d9f5f68d743ae7df9ba120cc24bf01e3";
  }

  static const char* value(const ::chess_tracking::TransformPointResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xd9f5f68d743ae7dfULL;
  static const uint64_t static_value2 = 0x9ba120cc24bf01e3ULL;
};

template<class ContainerAllocator>
struct DataType< ::chess_tracking::TransformPointResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "chess_tracking/TransformPointResponse";
  }

  static const char* value(const ::chess_tracking::TransformPointResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::chess_tracking::TransformPointResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "geometry_msgs/Point transformed_point\n"
"\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::chess_tracking::TransformPointResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::chess_tracking::TransformPointResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.transformed_point);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct TransformPointResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::chess_tracking::TransformPointResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::chess_tracking::TransformPointResponse_<ContainerAllocator>& v)
  {
    s << indent << "transformed_point: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.transformed_point);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CHESS_TRACKING_MESSAGE_TRANSFORMPOINTRESPONSE_H
